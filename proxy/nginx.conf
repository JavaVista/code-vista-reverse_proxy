# reverse proxy
http {

    include mime.types;

    # rate limits
    set_real_ip_from 0.0.0.0/0;
    real_ip_recursive on;
    real_ip_header X-Forward-For;
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

    upstream frontendserver {
        # For Production = replace IP address with your own instance private IP and port if necessary
        # Below for Development = use in your own computer
        # server host.docker.internal:3000;
        # service name, if using Docker Compose
        server frontend:3000;
    }

    upstream backendserver {
        # For Production = replace IP address with your own instance private IP and port if necessary
        # Below for Development = use in your own computer
        # server host.docker.internal:3005;
        # service name, if using Docker Compose
        server backend:3005;
    }

    server {
        listen 80;
        # Below for Development
        # server_name localhost;
        # (underscore) match any hostname
        server_name _;
        access_log /var/log/nginx/proxy.access.log;
        root /proxy;
        limit_req zone=mylimit burst=70 nodelay;

        location / {
            proxy_pass http://frontendserver;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;proxy_cache_bypass $http_upgrade;
            proxy_pass_request_headers on;
        }

        location /api_v1 {
            proxy_pass http://backendserver;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;proxy_cache_bypass $http_upgrade;
            proxy_pass_request_headers on;
        }
    }

}

events {
    worker_connections 1024;
}